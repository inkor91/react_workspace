데이터 Fetch 

Fetch api -> 네트워크 통신 도구
상황별 핸들리 -> 로딩/데이터/에러

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

공식문서를 보는 이유와 방법

-라이브러리는 만든 사람이 있음
-> 그들이 만든 목적과 도구의 사용법을 정리해둠
-> 책에서도 거의 공식문서의 내용을 담는다 

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
환경설정

node.js 설치프로그램 다운 -> 설치 -> 환경변수 설정 

cmd창에서 nodejs가 설치된 경로 npm 파일 경로설정
(C:\Program Files\nodejs\node_modules\npm)

npm install -g npm

그후 만들고하자는 워크스페이스 경로에서 

 npx create-react-app my-app

그 후 vscode 터미널에서 

npm start 라고 하면 localhost:3000 이라고 뜨고 

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

react 파일은 확장자가 .jsx 
extension 에서 react es7 검색하면 -> snippet이 있는데 다운해줌 

그후 새로 만든 파일에서 rfc (react function component)를 쳐주면 함수형 컴퍼넌트를 바로 만들어준다

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

JSX

JSX -> React.createElement 간편 표현식 

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

Props

Props -> 컴포넌트에 전달되는 단일 객체 
순수함수처럼 동작 -> Props 자체를 수정해서는 안됨 
컴포넌트 합성 -> 여러 컴포넌트를 모아서 
컴포넌트 추출 -> 여러곳에서 사용되거나 / 복잡한경우 

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

State and LifeCycle

rcc 로 기본틀을 만들수 있다. 

컴퍼넌트 내의 상태 -> 자신의 출력값을 변경
class component -> State LifeCycle
Functional component -> 훅으로 관리
유의사항 -> 직접 수정 X / 비동기적일 수 있음

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

React.component 컨포넌트 생명주기

constructor - state 초기화 및 메서드 바인딩
componentDidMount -> Dom 노드 초기화 및 데이터 Fetch
componentWillUnmount -> 타이머 제거 및 요청 취소 및 구독 해제
Functional Component -> hook으로 대부분 구현 가능 

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
합성 이벤트 (SyntheticEvent)

합성 이벤트 -> 인터페이스는 같지만 직접 대응되지 않음
Bubble/Capture -> Capture>target>Bubble
return false -> e.preventDefault() 해줘야함



